---
source: aml-syntax/src/expressions/tests.rs
expression: parse(input)
---
Call:
  fun:
    Ident:
      value: fun
      location:
        start_byte: 0
        end_byte: 3
  args:
    - Primitive:
        value:
          Int: 1
        location:
          start_byte: 4
          end_byte: 5
        original: "1"
    - Binary:
        lhs:
          Ident:
            value: a
            location:
              start_byte: 7
              end_byte: 8
        rhs:
          Binary:
            lhs:
              Primitive:
                value:
                  Int: 2
                location:
                  start_byte: 11
                  end_byte: 12
                original: "2"
            rhs:
              Primitive:
                value:
                  Int: 3
                location:
                  start_byte: 15
                  end_byte: 16
                original: "3"
            op: Mul
            location:
              start_byte: 11
              end_byte: 16
            original: 2 * 3
        op: Plus
        location:
          start_byte: 7
          end_byte: 16
        original: a + 2 * 3
    - Primitive:
        value:
          Int: 3
        location:
          start_byte: 18
          end_byte: 19
        original: "3"
  location:
    start_byte: 0
    end_byte: 20
  original: "fun(1, a + 2 * 3, 3)"
